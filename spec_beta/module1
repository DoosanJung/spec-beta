#!/usr/bin/env python
'''
'''
import pandas as pd
import numpy as np
from datetime import date, timedelta
from datetime import datetime
from dateutil.relativedelta import relativedelta
import statsmodels.api as sm
from tqdm import tqdm
import matplotlib.pyplot as plt
import os
import logging
from spec-beta.conf.SpecBetaConfig import SpecBetaConfig

logging.config.fileConfig("spec-beta/conf/SpecBeta.cfg")
logger = logging.getLogger()

class module1(object):
    '''
        retrieve data
    '''
    def get_symbols_lst():
        symbols = pd.read_csv('/Users/streamlyzer/DSJ/sb/data/symbol.csv')
        symbols_lst = symbols.columns.tolist()
        return symbols_lst

    def get_Ri_wo_wknds(decimal_unit):
        '''
        OUTPUT: Daily stock return
        idx == 'datetime64[ns]' 2000-01-03 ~ 2017-11-15
        shape == (4663, 751)
        '''
        RET_D_KSE = pd.read_csv('/Users/streamlyzer/DSJ/sb/data/RET_D_KSE_wo_wknds.csv',index_col=0)
        RET_D_KSE.index = pd.to_datetime(RET_D_KSE.index, dayfirst=True)
        if decimal_unit==True:
            RET_D_KSE = RET_D_KSE/100 # percentage to decimal
            return RET_D_KSE
        else:
            return RET_D_KSE # percentage

    def get_Rm_wo_wknds(decimal_unit):
        '''
        OUTPUT: Daily market return
        idx == 'datetime64[ns]' 2001-01-01 ~ 2017-11-15
        shape == (4403, 1)
        '''
        RET_MKT_D_KSE = pd.read_csv('/Users/streamlyzer/DSJ/sb/data/RET_MKT_D_KSE_wo_wknds.csv',\
                                    index_col=0, header=None, names=['Rm'])
        RET_MKT_D_KSE.index = pd.to_datetime(RET_MKT_D_KSE.index, dayfirst=True)
        if decimal_unit==True:
            RET_MKT_D_KSE = RET_MKT_D_KSE/100 # percentage to decimal
            return RET_MKT_D_KSE
        else:
            return RET_MKT_D_KSE # percentage

    def get_Rf_wo_wknds(decimal_unit, reg_mo_lst):
        '''
        OUTPUT: Daily risk-free return
        idx == 'datetime64[ns]' 2000-01-03 ~ 2017-11-15
        shape == (2315, 1)
        '''
        RF_CALL1 = pd.read_csv('/Users/streamlyzer/DSJ/sb/data/RF_CALL1_wo_wknds.csv',index_col=0, header=None, names=['RF_CALL1'])
        RF_CALL1.index = pd.to_datetime(RF_CALL1.index)
        RF_CALL1 = RF_CALL1[RF_CALL1.index >= reg_mo_lst.min()-relativedelta(years=1)]
        if decimal_unit==True:
            RF_CALL1 = RF_CALL1/100 # percentage to decimal
            return RF_CALL1
        else:
            return RF_CALL1 # percentage

    def get_E_Ri_wo_wknds(RET_D_KSE, RF_CALL1, symbols_lst, reg_mo_lst):
        '''
        OUTPUT: Daily excess stock return
        idx == 'datetime64[ns]'  2001-01-01 ~ 2017-11-15
        shape == (2315, 751)
        '''
        # R_f to R_f DataFrame
        RF_CALL1_df = RF_CALL1.assign(**{str(i):RF_CALL1['RF_CALL1'] for i in range(len(symbols_lst)-1)})
        RF_CALL1_df.columns = symbols_lst
        RET_D_KSE = RET_D_KSE[RET_D_KSE.index >= reg_mo_lst.min()-relativedelta(years=1)]
        # Somthing is wrong...
        # E_Ri = RET_D_KSE.subtract(RF_CALL1_df)

        # Instead
        E_Ri = RET_D_KSE
        return E_Ri

    def get_E_Rm_wo_wknds(RET_MKT_D_KSE, RF_CALL1, reg_mo_lst):
        '''
        OUTPUT: Daily excess market return
        idx == 'datetime64[ns]'
        shape == (2315, 751)
        '''
        RET_MKT_D_KSE = RET_MKT_D_KSE[RET_MKT_D_KSE.index >= reg_mo_lst.min()-relativedelta(years=1)]
        E_Rm = RET_MKT_D_KSE.Rm - RF_CALL1.RF_CALL1
        E_Rm.index = pd.to_datetime(E_Rm.index)
        return E_Rm

    def get_return_data_wo_wknds(decimal_unit, symbols_lst, reg_mo_lst, freq):
        '''
        OUTPUT: Excess returns, returns
        idx == 'datetime64[ns]'
        '''
        if freq == 'd':
            RET_D_KSE = get_Ri_wo_wknds(decimal_unit)
            RET_MKT_D_KSE = get_Rm_wo_wknds(decimal_unit)
            RF_CALL1 = get_Rf_wo_wknds(decimal_unit, reg_mo_lst)
            E_Ri = get_E_Ri_wo_wknds(RET_D_KSE, RF_CALL1, symbols_lst, reg_mo_lst)
            E_Rm = get_E_Rm_wo_wknds(RET_MKT_D_KSE, RF_CALL1, reg_mo_lst)
            return RET_D_KSE, RET_MKT_D_KSE, RF_CALL1, E_Ri, E_Rm
        elif freq == 'm':
            pass
        elif freq == 'q':
            pass
        elif freq == 'y':
            pass

    def get_reg_mo_lst(start_mo, end_mo):
        '''
        OUTPUT: Monthly regression months
        dtype == datetime64[ns]
        '''
        mo_lst = pd.read_csv('/Users/streamlyzer/DSJ/sb/data/yrmo.csv',header=None, names='m')
        mo_lst = mo_lst.m.apply(lambda mo: datetime.strptime(str(mo), "%Y%m"))
        reg_mo_lst = mo_lst[(mo_lst >= datetime.strptime(str(start_mo), "%Y%m"))&(mo_lst <= datetime.strptime(str(end_mo), "%Y%m"))]
        reg_mo_lst = reg_mo_lst.reset_index(drop=True)
        # reg_mo_lst = reg_mo_lst[:81]
        reg_mo_lst = reg_mo_lst[reg_mo_lst <= datetime.strptime(str(end_mo), "%Y%m") - relativedelta(years=1)]
        return reg_mo_lst
